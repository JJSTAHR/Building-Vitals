name: Deploy Token Management System

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  FIREBASE_PROJECT: building-vitals

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      - name: Run type checking
        run: npm run type-check
        continue-on-error: true

      - name: Run unit tests
        run: npm run test:coverage

      - name: Run integration tests
        run: npm run test:integration
        continue-on-error: true

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/coverage-final.json
          fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_ENCRYPTION_SECRET: ${{ secrets.VITE_ENCRYPTION_SECRET }}
          VITE_DEFAULT_TOKEN_FALLS_CITY: ${{ secrets.VITE_DEFAULT_TOKEN_FALLS_CITY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          retention-days: 7

  e2e:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, build, e2e]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.buildingvitals.com
    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Deploy to Firebase Hosting (Staging)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}
          channelId: staging
          projectId: ${{ env.FIREBASE_PROJECT }}-staging

      - name: Run smoke tests
        run: |
          npm install -g newman
          newman run tests/postman/smoke-tests.json \
            --env-var "BASE_URL=https://staging.buildingvitals.com"
        continue-on-error: true

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, build, e2e]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://buildingvitals.com
    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase Hosting (Production)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROD }}
          projectId: ${{ env.FIREBASE_PROJECT }}

      - name: Deploy Firestore Rules
        run: |
          firebase deploy --only firestore:rules \
            --project ${{ env.FIREBASE_PROJECT }} \
            --token ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Firestore Indexes
        run: |
          firebase deploy --only firestore:indexes \
            --project ${{ env.FIREBASE_PROJECT }} \
            --token ${{ secrets.FIREBASE_TOKEN }}

      - name: Run post-deployment verification
        run: |
          chmod +x ./scripts/post-deploy-verify.sh
          ./scripts/post-deploy-verify.sh https://buildingvitals.com

      - name: Create deployment tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          TAG="v$(date +%Y%m%d-%H%M%S)"
          git tag -a "$TAG" -m "Production deployment $TAG"
          git push origin "$TAG"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v$(date +%Y%m%d-%H%M%S)
          release_name: Production Release $(date +%Y-%m-%d)
          body: |
            Automated production deployment

            Changes in this release:
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Update deployment metrics
        if: success()
        run: |
          curl -X POST https://api.buildingvitals.com/metrics/deployment \
            -H "Authorization: Bearer ${{ secrets.METRICS_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"status":"success","version":"'$(date +%Y%m%d-%H%M%S)'","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}'
